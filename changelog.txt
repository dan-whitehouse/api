2.0.0 Build 20170922
    - Created XStaffMapper
    - Created XStudentMapper
    - Updated all Mappers to include additional null checks.
    - Added EntryExitCode Model to Core

2.0.0 Build 20170916
    - Added XCalendars Controller, Service, DAO & Mapper
    - Added XCourses Controller, Service, DAO & Mapper
    - Added XRosters Controller, Service, DAO & Mapper (Contains a bug and is slow)
    - Updated changelog titles for earlier versions
    - Other minor fixes and adjustments to existing classes

2.0.0 Build 20170912
    - Added XSchools Controller, Service, DAO & Mapper
    - Added Service Layer Interfaces
        - Updated methods in all Services
    - Added DAO Layer Interfaces
        - Updated methods in all DAOs
    - Added converter methods to Mappers to return a XObjectResponse
    - Updated Controllers to take advantage of new converter methods
        - Cleaned them up as well.

2.0.0 Build 20170910
    - Fixed configuration issue with SwaggerConfig path setting
    - Added Swagger Annotations to xLea Controller
    - Updated AuthRequest
        - Fixed issue where tokens sent with an authorization header would not validate against the JWTVerifier
    - Created XLeaMapper
        - Removed mapping code from XLeaController and placed it here.
    - Created AbstractController, which all controllers should extend in order to get additional information (like paging)

2.0.0 Build 20170904
    - Added Swagger WebApp
        - /api now returns swagger
        - Issue: Can't return a request, doesn't seem to authenticate
    - Added Info Controller
        - Also added model objects which make up InfoResponse
        - api/info
    - Updated AuthHandler
        - Checks if path is exception before checking headers/parameters.
        - Added /info to exceptions list
    - CacheContainer is now tracked by git

2.0.0 Build 20170623
    - Added XPress Objects
        - Updated Phone & Address to include isEmptyObject method which checks if all fields are null
    - Created XLeaController
        - Added mapping methods
    - Created JacksonConfiguration
        - Used to override spring defaults for fasterXML ObjectMapper

2.0.0 Build 20170514
    - Updated project pom dependencies to:
        - hibernate-core: v5.2.10
        - spring-* v4.3.8
        - jackson-databind: v2.8.8.1
        - commons-lang3: v3.5
    - Created All Core Model files
    - Updated LeaDao to make better requests
    - Created SwaggerConfig which creates swagger api-docs json for Swagger to consume.
            - http://localhost:8080/api/swagger/api-docs
    - Created AuthRequest to hold and handle some of the basic request info used for authenticating
    - Updated AuthHandler
        - Starting using AuthRequest object
        - Modified logic to better handle expired tokens
        - Created method for to check if the requested path is an exception to the rule of needing a token
            - Ie: /swagger/api-docs

2.0.0 Build 20160718
	- Updated AppCache to use Google Guava caching.
	- Created AppCache to use Google Guava caching.
	- Removed FileManager.
	- Updated methods to Configure to gather App and Profile data at startup.
		- initializeAppCache
		- initializeProfileCache
	- Updated AuthHandler to use new methods created when switching to Guava.

2.0.0 Build 20160715
	- Created AppCache to hold onto valid App data.
	- Created ProfileCache to hold onto valid Profile data.
	- Created FileManager to create and load cached Apps and Profiles.
	- Add methods to Configure to gather App and Profile data at startup.
		- initializeAppCache
		- initializeProfileCache
	- Updated Profile to include profile_Id field.
	- Added new properties to config.properties file which locate the temporary cached files directory.
		- cache.tmp.app.path
		- cache.tmp.profile.path
	- Updated AuthHandler to now set App and Profile when creating a new session using AppCache and ProfileCache.
	
2.0.0 Build 20160610
	- Added setAdditionalHeaders method in HeaderHandler to now set any additional globally headers.
	- Created LogHandler to globally return logs.
	- Created Log to contain the log information.

2.0.0 Build 20160515
	- Created ConfigProperties to easily store and access configurable information.
	- Created Configure to load ConfigProperties at startup and add properties which come from the system environment variables.
	- Added Provider, ProviderKV, and DistrictKV to component.config.model
	- Added ConfigService to retrieve data from external configuration service.
	- Small tweaks to other classes so they would work with the rest of the additions.
		- Initializer now starts Configure.
		- DBConfig now loads properties from ConfigProperties
		- JWTVerifier now retrieves sharedSecret from ConfigService.
		- Removed catalog annotation from Lea and LeaTelepohone.
	
2.0.0 Build 20160511
	- Created HeaderHandler to globally return response headers.
	- Created IController so all other Controllers follow the rules.

2.0.0 Build 20160509
	- Parameter Tokens being allowed is now configurable through config.properties.
	- Created new Exception (ConfigException) which should be returned when something is configured improperly.
	- Added changelog.txt to keep track of major changes, as well as writing up old improvements.
	- Moved AuthHandler to security package.
	
2.0.0 Build 20160504
	- Created SessionManager to hold onto valid tokens associated with the application_id defined in the DecodedToken.
	- Added logic to AuthHandler to invalidate tokens which are valid, but the expiry date is less then the token saved by the SessionManager.
		- Tokens which value are equal are valid as long as the token continues to validate or is overwritten by a newer token.
	- Created SessionTask which will remove expired sessions from the SessionManager.
	

2.0.0 Build 20160501
	- Basic Setup of Controllers, Services, DAOs, and Models.
	- Created AuthHandler to check for tokens in the headers as well as query parameters globally.
    - Added GlobalExceptionHandler to allow the API to return custom Exceptions which report proper HTTP status codes.